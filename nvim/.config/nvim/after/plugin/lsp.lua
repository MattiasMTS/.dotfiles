-- local status, mason = pcall(require, "mason")
-- if not status then
-- 	print("mason failed")
-- 	return
-- end
--
-- local status2, mason_lspconfig = pcall(require, "mason-lspconfig")
-- if not status2 then
-- 	print("mason-lspconfig failed")
-- 	return
-- end
--
-- local status3, mason_null_ls = pcall(require, "mason-null-ls")
-- if not status3 then
-- 	print("mason-null-ls failed")
-- 	return
-- end
--
-- local status4, cmp_nvim_lsp = pcall(require, "cmp_nvim_lsp")
-- if not status4 then
-- 	print("cmp_nvim_lsp failed")
-- 	return
-- end
--
-- local status5, lspconfig = pcall(require, "lspconfig")
-- if not status5 then
-- 	print("lspconfig failed")
-- 	return
-- end
--
-- local status6, fidget = pcall(require, "fidget")
-- if not status6 then
-- 	print("fidget failed")
-- 	return
-- end
--
-- -- enable mason
-- mason.setup()
--
-- -- lsp manager setup
-- mason_lspconfig.setup({
-- 	automatic_installation = false,
-- 	-- ensure_installed = {
-- 	-- 	"sumneko_lua",
-- 	-- 	"yamlls",
-- 	-- 	"pyright",
-- 	-- 	"gopls",
-- 	-- 	"jsonls",
-- 	-- 	"sqls",
-- 	-- 	"marksman",
-- 	-- 	"terraformls",
-- 	-- 	"bashls",
-- 	-- 	"dockerls",
-- 	-- },
-- 	ui = {
-- 		icons = {
-- 			package_installed = "✓",
-- 			package_pending = "➜",
-- 			package_uninstalled = "✗",
-- 		},
-- 	},
-- 	log_level = vim.log.levels.DEBUG,
-- })
--
-- -- null-ls setup
-- mason_null_ls.setup({
-- 	-- list of formatters & linters for mason to install
-- 	-- ensure_installed = {
-- 	-- 	"staticcheck",
-- 	-- 	"golines",
-- 	-- 	"goimports",
-- 	-- 	"prettier", -- yml/yaml/toml/json formatter
-- 	-- 	"stylua", -- lua formatter
-- 	-- 	"eslint_d",
-- 	-- 	"actionlint", -- github actions linter
-- 	-- 	"yamllint", -- yaml files
-- 	-- 	"shellcheck", -- linter for bash
-- 	-- 	"tflint", -- linter for terraform
-- 	-- 	"protolint", -- linter for protocol buffers
-- 	-- },
-- 	-- auto-install configured formatters & linters (with null-ls)
-- 	automatic_installation = false,
-- })
-- vim.keymap.set("n", "[d", vim.diagnostic.goto_prev)
-- vim.keymap.set("n", "]d", vim.diagnostic.goto_next)
-- --[[ vim.keymap.set('n', '<leader>e', vim.diagnostic.open_float)
-- vim.keymap.set('n', '<leader>q', vim.diagnostic.setloclist) ]]
-- -- enable keybinds only for when lsp server available
-- local on_attach = function(_, bufnr)
-- 	-- NOTE: Remember that lua is a real programming language, and as such it is possible
-- 	-- to define small helper and utility functions so you don't have to repeat yourself
-- 	-- many times.
-- 	--
-- 	-- In this case, we create a function that lets us more easily define mappings specific
-- 	-- for LSP related items. It sets the mode, buffer and description for us each time.
-- 	local nmap = function(keys, func, desc)
-- 		if desc then
-- 			desc = "LSP: " .. desc
-- 		end
--
-- 		vim.keymap.set("n", keys, func, { buffer = bufnr, desc = desc, noremap = true, silent = true })
-- 	end
--
-- 	nmap("<leader>rn", vim.lsp.buf.rename, "[R]e[n]ame")
-- 	nmap("<leader>ca", vim.lsp.buf.code_action, "[C]ode [A]ction")
--
-- 	-- nmap("gd", vim.lsp.buf.definition, "[G]oto [D]efinition")
-- 	-- nmap("gD", vim.lsp.buf.declaration, "[G]oto [D]eclaration")
-- 	vim.keymap.set(
-- 		"n",
-- 		"gd",
-- 		"<cmd>lua vim.lsp.buf.definition()<CR>zz<CR>",
-- 		{ buffer = bufnr, noremap = true, silent = true }
-- 	)
-- 	vim.keymap.set(
-- 		"n",
-- 		"gD",
-- 		"<cmd>lua vim.lsp.buf.declaration()<CR>zz<CR>",
-- 		{ buffer = bufnr, noremap = true, silent = true }
-- 	)
-- 	nmap("gr", require("telescope.builtin").lsp_references, "[G]oto [R]references")
-- 	nmap("gI", vim.lsp.buf.implementation, "[G]oto [I]mplementation")
-- 	nmap("<leader>D", vim.lsp.buf.type_definition, "Type [D]efinition")
-- 	nmap("<leader>ds", require("telescope.builtin").lsp_document_symbols, "[D]ocument [S]symbols")
--
-- 	-- See `:help K` for why this keymap
-- 	nmap("K", vim.lsp.buf.hover, "Hover Documentation")
-- 	nmap("<C-k>", vim.lsp.buf.signature_help, "Signature Documentation")
--
-- 	-- Create a command `:Format` local to the LSP buffer
-- 	vim.api.nvim_buf_create_user_command(bufnr, "Format", function(_)
-- 		vim.lsp.buf.format()
-- 	end, { desc = "Format current buffer with LSP" })
-- 	vim.keymap.set("n", "<leader>ff", "<cmd>:Format <CR>")
-- end
--
-- local capabilities = cmp_nvim_lsp.default_capabilities()
-- capabilities.textDocument.completion.completionItem.snippetSupport = true
--
-- -- configure lua lsp
-- local runtime_path = vim.split(package.path, ";")
-- table.insert(runtime_path, "lua/?.lua")
-- table.insert(runtime_path, "lua/?/init.lua")
--
-- -- .lua files
-- lspconfig.sumneko_lua.setup({
-- 	capabilities = capabilities,
-- 	on_attach = on_attach,
-- 	settings = {
-- 		Lua = {
-- 			runtime = {
-- 				-- Tell the language server which version of Lua you're using (most likely LuaJIT in the case of Neovim)
-- 				version = "LuaJIT",
-- 				-- Setup your lua path
-- 				path = runtime_path,
-- 			},
-- 			diagnostics = {
-- 				-- Get the language server to recognize the `vim` global
-- 				globals = { "vim" },
-- 			},
-- 			-- workspace = {
-- 			-- 	-- Make the server aware of Neovim runtime files
-- 			-- 	library = vim.api.nvim_get_runtime_file("", true),
-- 			-- },
-- 			-- Do not send telemetry data containing a randomized but unique identifier
-- 			telemetry = {
-- 				enable = false,
-- 			},
-- 		},
-- 	},
-- })
--
-- -- .yaml files
-- lspconfig.yamlls.setup({
-- 	capabilities = capabilities,
-- 	on_attach = on_attach,
-- 	settings = {
-- 		yaml = {
-- 			schemas = {
-- 				["https://raw.githubusercontent.com/quantumblacklabs/kedro/develop/static/jsonschema/kedro-catalog-0.17.json"] = "conf/**/*catalog*.{yml,yaml}",
-- 				["https://json.schemastore.org/github-workflow.json"] = "/.github/workflows/*.{yml,yaml}",
-- 				["kubernetes"] = "/*.{yml,yaml}",
-- 			},
-- 		},
-- 	},
-- })
--
-- lspconfig.gopls.setup({
-- 	capability = capabilities,
-- 	on_attach = on_attach,
-- 	cmd = { "gopls", "serve" },
-- 	filetypes = { "go", "gomod" },
-- 	root_dir = require("lspconfig/util").root_pattern("go.work", "go.mod", ".git"),
-- 	settings = {
-- 		gopls = {
-- 			analyses = {
-- 				unusedparams = true,
-- 			},
-- 			staticcheck = true,
-- 			-- experimental
-- 			codelenses = { test = true },
-- 			hints = {
-- 				assignVariableTypes = true,
-- 				compositeLiteralFields = true,
-- 				compositeLiteralTypes = true,
-- 				constantValues = true,
-- 				functionTypeParameters = true,
-- 				parameterNames = true,
-- 				rangeVariableTypes = true,
-- 			},
-- 		},
-- 	},
-- })
--
-- local servers = { "pyright", "jsonls", "marksman", "terraformls", "tflint", "bashls", "dockerls", "graphql" }
-- for _, lsp in ipairs(servers) do
-- 	lspconfig[lsp].setup({
-- 		capabilities = capabilities,
-- 		on_attach = on_attach,
-- 	})
-- end
--
-- fidget.setup({
-- 	text = {
-- 		spinner = "dots_ellipsis",
-- 	},
-- 	align = {
-- 		bottom = false,
-- 	},
-- 	window = {
-- 		relative = "editor",
-- 		blend = 0, -- &winblend for the window
-- 		zindex = nil, -- the zindex value for the window
-- 		border = "none", -- style of border for the fidget window
-- 	},
-- })
